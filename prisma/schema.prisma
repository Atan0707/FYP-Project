// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  ic        String   @unique
  phone     String
  address   String?
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Family relationships
  families  Family[] @relation("UserFamilies")
  relatedFamilies Family[] @relation("RelatedFamilies")
  assets    Asset[]
  pendingAssets PendingAsset[]
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Family {
  id            String   @id @default(cuid())
  fullName      String
  ic            String
  relationship  String
  phone         String
  isRegistered  Boolean  @default(false)
  user          User     @relation("UserFamilies", fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  // Add reciprocal relationship fields
  relatedToUser User?    @relation("RelatedFamilies", fields: [relatedUserId], references: [id], onDelete: SetNull)
  relatedUserId String?
  inverseRelationship String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Asset {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g., Property, Vehicle, Investment
  value       Float
  description String?
  pdfFile     String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Add relation to AssetDistribution
  distribution AssetDistribution?
}

model PendingAsset {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g., Property, Vehicle, Investment
  value       Float
  description String?
  pdfFile     String?
  status      String   @default("pending") // pending, approved, rejected
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for asset distribution
model AssetDistribution {
  id          String   @id @default(cuid())
  type        String   // waqf, faraid, hibah, will
  notes       String?
  status      String   @default("pending") // pending, approved, completed
  // For hibah and will, we need to specify beneficiaries
  beneficiaries Json?  // Array of beneficiary objects with family member IDs and percentages
  // For waqf, we need to specify the organization
  organization String?
  // Reference to the asset being distributed
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}